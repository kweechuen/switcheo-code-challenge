List out the computational inefficiencies and anti-patterns found in the code block below.

1. This code block uses
    1. ReactJS with TypeScript.
    2. Functional components.
    3. React Hooks
2. Implement the Datasource class so that it can retrieve the prices required.
3. You should explicitly state the issues and explain how to improve them.
4. You should also provide a refactored version of the code.


computational inefficiencies and anti-patterns:

1. Redundant formattedBalances step
Issue: Created an unnecessary intermediate array for formatting balances.
Fix: Applied formatting (balance.amount.toFixed()) directly in the rows creation step.
2. Inefficient switch statement
Issue: Used a verbose and slower switch statement for mapping blockchain priorities.
Fix: Replaced with a constant-time lookup table.
3.Lack of Proper Error Handling
Issue: Logged errors to the console without informing the user.
Fix: Added an error state to display user-friendly fallback UI for API failures.


	NEW CODE :

interface WalletBalance {
  currency: string;
  amount: number;
}
interface FormattedWalletBalance {
  currency: string;
  amount: number;
  formatted: string;
}

class Datasource {
  private url: string;

  constructor(url: string) {
    this.url = url;
}

interface Props extends BoxProps {

}
const WalletPage: React.FC<Props> = (props: Props) => {
  const { children, ...rest } = props;
  const balances = useWalletBalances();
  const [prices, setPrices] = useState({});
  const [error, setError] = useState<string | null>(null);                  // To create a state variable called error. This is necessary so that we can track if an occurred during the execution of the code as well as showing an error message to the user in the UI if something goes wrong.

useEffect(() => {
  const datasource = new Datasource("https://interview.switcheo.com/prices.json");
  datasource
    .getPrices()
    .then(setPrices)                                                        // Updates the prices if the fetch is successful.
    .catch((err) => {
      console.error(err);                                                   // Logs the error to the console for debugging.
      setError("Failed to fetch prices. Please try again later.");          // Updates the error state with a message.
    });
}, []);


const blockchainPriority: Record<string, number> = {
  Osmosis: 100,
  Ethereum: 50,
  Arbitrum: 30,
  Zilliqa: 20,
  Neo: 20,
};                                                                         // Simplifying the code for getPriority as an onject lookup is simpler and easier to maintain as compared to a swtich statement.

const getPriority = (blockchain: string): number => {
  return blockchainPriority[blockchain] ?? -99; 
};


  const sortedBalances = useMemo(() => {
    return balances.filter((balance: WalletBalance) => {
		  const balancePriority = getPriority(balance.blockchain);
		  if (lhsPriority > -99) {
		     if (balance.amount <= 0) {
		       return true;
		     }
		  }
		  return false
		}).sort((lhs: WalletBalance, rhs: WalletBalance) => {
			const leftPriority = getPriority(lhs.blockchain);
		  const rightPriority = getPriority(rhs.blockchain);
		  if (leftPriority > rightPriority) {
		    return -1;
		  } else if (rightPriority > leftPriority) {
		    return 1;
		  }
    });
  }, [balances, prices]);

                                                                      // Whole part here is removed as the original code is doing the same thing as the code below, so it will be redundant.

  const rows = sortedBalances.map((balance: WalletBalance, index: number) => {
    const usdValue = prices[balance.currency] * balance.amount;
    return (
      <WalletRow 
        className={classes.row}
        key={index}
        amount={balance.amount}
        usdValue={usdValue}
        formattedAmount={balance.amount.toFixed()}                    // formattedBalances step is removed by directly formatting the amount when creating the rows.
      />
    );
  });

  if (error) {
    return <div>Error: {error}</div>;                                 // Fallback UI for errors
}

  return (
    <div {...rest}>
      {rows}
    </div>
  )
};
